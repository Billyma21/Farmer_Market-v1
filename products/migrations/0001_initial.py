# Generated by Django 5.1.3 on 2025-04-16 13:21

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AvailabilityTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Lundi'), (1, 'Mardi'), (2, 'Mercredi'), (3, 'Jeudi'), (4, 'Vendredi'), (5, 'Samedi'), (6, 'Dimanche')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('max_orders', models.PositiveIntegerField(default=5, help_text='Nombre maximum de commandes pour ce créneau')),
                ('location', models.CharField(help_text='Lieu de retrait des commandes', max_length=255)),
                ('active', models.BooleanField(default=True)),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['weekday', 'start_time'],
                'unique_together': {('farmer', 'weekday', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cart', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FarmerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(blank=True, max_length=255, verbose_name='Nom de la ferme')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude pour la localisation sur la carte', null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, help_text='Longitude pour la localisation sur la carte', null=True, verbose_name='Longitude')),
                ('description', models.TextField(blank=True, help_text='Brève description du fermier et de sa ferme', verbose_name='Description')),
                ('address', models.CharField(blank=True, help_text='Adresse complète du fermier', max_length=255, verbose_name='Adresse')),
                ('postal_code', models.CharField(blank=True, help_text='Code postal du fermier', max_length=10, verbose_name='Code postal')),
                ('city', models.CharField(blank=True, help_text='Ville du fermier', max_length=100, verbose_name='Ville')),
                ('phone_number', models.CharField(blank=True, help_text='Numéro de téléphone du fermier', max_length=15, validators=[django.core.validators.RegexValidator(message="Le numéro de téléphone doit être au format: '+999999999'. 10-15 chiffres autorisés.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Téléphone')),
                ('agriculture_sector', models.CharField(blank=True, help_text='Secteur ou branche agricole de la ferme (ex: culture, élevage, etc.)', max_length=255, verbose_name='Secteur agricole')),
                ('services', models.TextField(blank=True, help_text='Services supplémentaires fournis par la ferme (ex: visites, produits locaux, etc.)', verbose_name='Services')),
                ('opening_hours', models.TextField(blank=True, help_text="Horaires d'ouverture de la ferme", verbose_name="Horaires d'ouverture")),
                ('google_maps_link', models.CharField(blank=True, help_text='Lien vers Google Maps pour localisation', max_length=255, verbose_name='Lien Google Maps')),
                ('additional_info', models.TextField(blank=True, help_text='Informations supplémentaires sur la ferme (ex: histoire, méthode de culture, etc.)', verbose_name='Informations supplémentaires')),
                ('website', models.URLField(blank=True, help_text='Site web de la ferme', null=True, verbose_name='Site web')),
                ('facebook', models.URLField(blank=True, help_text='Lien vers la page Facebook', null=True, verbose_name='Facebook')),
                ('instagram', models.URLField(blank=True, help_text='Lien vers le compte Instagram', null=True, verbose_name='Instagram')),
                ('twitter', models.URLField(blank=True, help_text='Lien vers le compte Twitter', null=True, verbose_name='Twitter')),
                ('is_organic_certified', models.BooleanField(default=False, help_text='La ferme est-elle certifiée biologique?', verbose_name='Certifié biologique')),
                ('certification_details', models.TextField(blank=True, help_text='Détails des certifications (Bio, HVE, etc.)', verbose_name='Détails des certifications')),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de création')),
                ('farm_images', models.ImageField(blank=True, help_text='Téléchargez une image représentant la ferme', null=True, upload_to='farm_images/', verbose_name='Image de la ferme')),
                ('image_1', models.ImageField(blank=True, null=True, upload_to='farm_gallery/', verbose_name='Image supplémentaire 1')),
                ('image_2', models.ImageField(blank=True, null=True, upload_to='farm_gallery/', verbose_name='Image supplémentaire 2')),
                ('image_3', models.ImageField(blank=True, null=True, upload_to='farm_gallery/', verbose_name='Image supplémentaire 3')),
                ('farmer', models.OneToOneField(limit_choices_to={'is_farmer': True}, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil de fermier',
                'verbose_name_plural': 'Profils de fermiers',
                'ordering': ['farm_name', 'farmer__username'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('confirmed', 'Confirmée'), ('ready', 'Prête à être récupérée'), ('completed', 'Terminée'), ('cancelled', 'Annulée')], default='pending', max_length=20)),
                ('pickup_date', models.DateTimeField(blank=True, null=True)),
                ('pickup_time_slot', models.CharField(blank=True, max_length=50, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('notes', models.TextField(blank=True, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('payment_status', models.CharField(choices=[('unpaid', 'Non payée'), ('processing', 'En cours de paiement'), ('paid', 'Payée'), ('refunded', 'Remboursée')], default='unpaid', max_length=20)),
                ('payment_method', models.CharField(blank=True, choices=[('card', 'Carte de crédit'), ('cash', 'Espèces'), ('transfer', 'Virement bancaire')], max_length=20, null=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('email', 'Email'), ('in_app', "Dans l'application"), ('both', 'Les deux')], default='email', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('sent', 'Envoyée'), ('failed', 'Échec'), ('read', 'Lue')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='products.order')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('description', models.TextField(verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Image')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout")),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('stock', models.IntegerField(default=0, verbose_name='Stock disponible')),
                ('sales_count', models.IntegerField(default=0, verbose_name='Nombre de ventes')),
                ('is_organic', models.BooleanField(default=False, verbose_name='Produit bio')),
                ('unit', models.CharField(choices=[('kg', 'Kilogramme'), ('g', 'Gramme'), ('l', 'Litre'), ('cl', 'Centilitre'), ('unit', 'Unité'), ('box', 'Panier')], default='kg', max_length=20, verbose_name='Unité de mesure')),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category', verbose_name='Catégorie')),
                ('farmer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Fermier')),
            ],
            options={
                'verbose_name': 'Produit',
                'verbose_name_plural': 'Produits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='products.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='products.product')),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='products.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='products.product')),
            ],
        ),
        migrations.CreateModel(
            name='PickupAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pickup_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('availability_slot', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='appointments', to='products.availabilitytimeslot')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pickup_appointment', to='products.order')),
            ],
            options={
                'ordering': ['pickup_date', 'availability_slot__start_time'],
                'unique_together': {('availability_slot', 'pickup_date', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1 étoile'), (2, '2 étoiles'), (3, '3 étoiles'), (4, '4 étoiles'), (5, '5 étoiles')])),
                ('title', models.CharField(max_length=100)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('product', 'user')},
            },
        ),
    ]
